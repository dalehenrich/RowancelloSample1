#!/usr/bin/env superdoit_stone
options
{
	SuperDoitOptionalOptionWithRequiredArg long: 'projectsHome'.
}
%
#
#options
#{
#	SuperDoitOptionalOptionWithNoArg long: 'noarg'.
#	SuperDoitOptionalOptionWithNoArg long: 'noarg' short: 'n'.
#
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' default: 'default'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o' default: 'default'.
#
#	SuperDoitRequiredOptionWithRequiredArg long: 'required'.
#	SuperDoitRequiredOptionWithRequiredArg long: 'required' short: 'r'.
#}
#%
#
usage
-----
USAGE 
  # with GS_HOME set (<stone-name> optional if run in $GS_HOME/servers/stones/<stone-name> directory)
  $basename [--help | -h] [--debug | -D]  [--debugGem] [-- [<stone-name> [<topaz-command-line-args>] ] ]
  # with GEMSTONE set
  $basename [--help | -h] [--debug | -D]  [--debugGem] -- (-r | -l | -L) -I <path-to-.topazini> [<topaz-command-line-args>]

DESCRIPTION
  <put your description here>

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error
  --debugGem                 If terminal is connected to stdout, bring up debugger. If not,
                             dump stack to stdout and wait for topaz to attach using topaz
                             DEBUGGEM command.

EXAMPLES
  $basename --help                           -- gs_351             # with GS_HOME set
  $basename -h                               -- -l -I ./.topazini  # with GEMSTONE set
  $basename -D <script-arguments>            <topaz-arguments>
  $basename --debugGem <script-arguments>    <topaz-arguments>
  $basename <script-arguments>               <topaz-arguments>
-----
%
instvars
%
method
translateComponentsInProjectToClusters: resolvedProject
	"translate the components in the resolvedProject into clusters and subclusters"
	resolvedProject _projectComponents do: [:component |
		component populateClustersForProject: resolvedProject ].
%
method
exportClusterStructuresFor: resolvedProject
	| rowanRoot |
	rowanRoot := (self positionalArgs at: 2) asFileReference.
	resolvedProject _projectClusters clusters keysAndValuesDo: [:clusterName :cluster |
		(rowanRoot / 'clusters' / clusterName , 'ston') writeStreamDo: [:fileStream |
			fileStream truncate.
			STON put: cluster onStreamPretty: fileStream ] ].
	resolvedProject _projectClusters subclusters keysAndValuesDo: [:subclusterName :subcluster |
		(rowanRoot / 'subclusters' / subclusterName , 'ston') writeStreamDo: [:fileStream |
			fileStream truncate.
			STON put: subcluster onStreamPretty: fileStream ] ].
%
doit
	| resolvedProject loadSpec |
	self projectsHome
		ifNil: [
			(System gemEnvironmentVariable: 'ROWAN_PROJECTS_HOME') 
				ifNil: [ self error: 'ROWAN_PROJECTS_HOME not definied. Define ROWAN_PROJECTS_HOME or use --projectsHome option' ] ]
		ifNotNil: [:rowanProjectsHome | System gemEnvironmentVariable: 'ROWAN_PROJECTS_HOME' put: rowanProjectsHome ].
	self positionalArgs size = 0 ifTrue: [ self error: 'Must provide the loadSpecUrl as first positional argument' ].
	loadSpec := (RwSpecification fromUrl: (self positionalArgs at: 1)) copyAsV4_cluster. 
	loadSpec 
		diskUrl: ('$ROWAN_PROJECTS_HOME' asFileReference / 'RowanV3') pathString.
	resolvedProject := loadSpec read.
	self translateComponentsInProjectToClusters: resolvedProject projectDefinition.
	self exportClusterStructuresFor: resolvedProject.
	^ self noResult
%
